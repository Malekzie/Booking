// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid())
  email    String    @unique
  password String
  username String?
  role     Role      @default(PASSENGER)
  bookings Booking[]
  sessions Session[]
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Flight {
  id           String    @id @default(uuid())
  flightNumber String    @unique
  origin       String
  destination  String
  departure    DateTime
  arrival      DateTime
  seatsTotal   Int
  bookings     Booking[]
}

model Booking {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  flight   Flight @relation(fields: [flightId], references: [id])
  flightId String

  seat Int // Optional: if seat selection is enabled

  createdAt DateTime @default(now())
}

enum Role {
  PASSENGER
  ADMIN
}
